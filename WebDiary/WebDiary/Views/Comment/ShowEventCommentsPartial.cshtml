@using System.Security.Claims;
@model List<CommentViewModel>


<div class="container">
    <div class="row height d-flex justify-content-center align-items-center">
        <div class="prokrutka">
            <div class="col-md-30">
                <div class="card">
                    <div class="mt-2">
                        @* @if (Model.Count != 0)
                        { *@
                        @foreach (CommentViewModel commentViewModel in Model)
                        {
                            <div class="d-flex flex-row p-3">
                                @* <img src="https://i.imgur.com/zQZSWrt.jpg" width="40" height="40" class="rounded-circle mr-3">*@
                                <div class="w-100">
                                    <input type="hidden" class="commentId" value="@commentViewModel.Id">
                                    <div class="d-flex justify-content-between align-items-center">

                                        <div class="d-flex flex-row align-items-center">
                                            <input type="hidden" class="commentId" value="@commentViewModel.Id">
                                            <input type="hidden" class="eventId" value="@commentViewModel.EventId">
                                            <small class="c-badge">
                                                <b>@commentViewModel.Email</b>
                                                @if (commentViewModel.EditedAt != null)
                                                {
                                                    <small class="c-badge"><i>Edited at @commentViewModel.EditedAt.Value.ToString("HH:mm MM/dd/yyyy")</i></small>
                                                }
                                            </small>
                                        </div>
                                        <small>@commentViewModel.CreatedAt.Value.ToString("HH:mm MM/dd/yyyy")</small> @* ("dddd, dd MMMM yyyy") *@
                                    </div>
                                    <p class="text-justify comment-text mb-0">@commentViewModel.Content</p>
                                    <div class="d-flex flex-row user-feed">
                                        @if (commentViewModel.UserId == User.FindFirstValue(ClaimTypes.NameIdentifier))
                                        {
                                            <span class="commentEdit"><small class="c-badge"><i>Edit</i></small></span>
                                            <span class="commentDelete"><small class="c-badge"><i>Delete</i></small></span>
                                        }
                                        else
                                        {
                                            <span class="commentReply"><small class="c-badge"><i>Reply</i></small></span>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                        @* } *@
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    $('.commentDelete').click(function (event) {
        event.preventDefault();

        var commentId = $(this)
            .closest('.w-100') // goes up in the tree until .w-100
            .children('.align-items-center')
            .children('.align-items-center')
            .find('.commentId').val();

        var eventId = $(this)
            .closest('.w-100')
            .children('.align-items-center')
            .children('.align-items-center')
            .find('.eventId').val();

        var commentdto =
        {
            id: commentId,
            eventId: eventId
        };

        $.ajax({
            url: "/Comment/DeleteComment",
            data: JSON.stringify(commentdto),
            type: "POST",
            contentType: "application/json;charset=utf-8",
            dataType: "html",
            success: function (data) {
                $('#show-event-comments-partial').html(data);
            },
            error: function (errormessage) {
                console.log(errormessage.responseText);
            }
        });
    });
</script>

<script>
    /**
    * Check if a database exists
    * param {string} name Database name
    * param {function} callback Function to return the response
    * returns {bool} True if the database exists
    */
    var db;
    function databaseExists(name, callback) { //if db not exist
        var dbExists = true;
        var request = window.indexedDB.open(name);
        request.onupgradeneeded = function (e) {
            //The upgradeneeded event is fired when an attempt was made to open a database with a version number higher than its current version.
            if (request.result.version === 1) {
                dbExists = false;
                //window.indexedDB.deleteDatabase(name);
                db = e.target.result;
                //You can't create an objectStore in an onsuccess method. You can only do this in a upgradeneeded event.
                var objectstore = db.createObjectStore("comments", {
                    autoIncrement: false,
                });
                objectstore.createIndex("comment", "comment", { unique: false });
                //db.close();

                if (callback) callback(objectstore);
                //если не существует, то создается и существует
            }
        };
        //https://stackoverflow.com/questions/52137882/indexeddb-add-record-to-objectstore-only-works-once
    }
    function addNewRecord(data, name) {
        var request = window.indexedDB.open(name);
        request.onsuccess = function (e) {
            db = e.target.result;
            const transaction = db.transaction(["comments"], "readwrite");
            const objectStore = transaction.objectStore("comments");
            objectStore.add(data.comment, data.ID);
            //db.close();
        };
    }

    function getComment(key, name) {
        var request = window.indexedDB.open(name);

        return new Promise((resolve, reject) => {
            request.onsuccess = function (e) {
                db = e.target.result;
                const transaction = db.transaction(["comments"], "readwrite");
                transaction.oncomplete = (event) => {
                    console.log("Transaction completed");
                };
                transaction.onerror = (event) => {
                    //TODO: store errors in log file
                    console.log("Transaction not opened due to error: " + transaction.error); 
                };

                const objectStore = transaction.objectStore("comments");
                const objectStoreRequest = objectStore.get(key);
                objectStoreRequest.onerror = (event) => {
                    //TODO: store errors in log file
                    console.log("Request not successful");
                };
                objectStoreRequest.onsuccess = (event) => {
                    console.log("Request successful")
                    resolve(objectStoreRequest.result);
                };
            }
        })
    }

    function clearDb(name) {
        var request = window.indexedDB.open(name);

        return new Promise((resolve, reject) => {
            request.onsuccess = function (e) {
                db = e.target.result;
                const transaction = db.transaction(["comments"], "readwrite");

                transaction.oncomplete = (event) => {
                    console.log("Transaction completed");
                };
                transaction.onerror = (event) => {
                    //TODO: store errors in log file
                    console.log("Transaction not opened due to error: " + transaction.error);
                };

                const objectStore = transaction.objectStore("comments");
                const objectStoreRequest = objectStore.clear();

                objectStoreRequest.onerror = (event) => {
                    //TODO: store errors in log file
                    console.log("Request not successful");
                };
                objectStoreRequest.onsuccess = (event) => {
                    console.log("Request successful");
                    resolve(objectStoreRequest.result);
                };
            }
        })
    }

    $('.commentEdit').click(async function (event) {
        event.preventDefault();

        var name = "CommentsDB";
        databaseExists(name, function (db) { 
            //IF error...
        });

        var commentId = $(this)
            .closest('.w-100') // goes up in the tree until .w-100
            .children('.align-items-center')
            .children('.align-items-center')
            .find('.commentId').val();

        const text = $(this).parent().prev('.text-justify').text().trim();
        
        //from EDIT to SAVE
        if ($(this).text() == 'Edit') { 
            await clearDb(name); 

            $(this).parent().prev('.text-justify').prop('contenteditable', true);
            $(this).parent().prev('.text-justify').focus();
            $(this).text('Save'); //FIX: this resetting tags <small> and <i>
            
            $(".w-100").each((index, element) => {
                var data = {
                    ID: $(element).find(".align-items-center .commentId").val(),
                    comment: $(element).children("p").text()
                };
                addNewRecord(data, name);
            });
        }

        //from SAVE to EDIT
        else { 
            const currentCommentText = await getComment(commentId, name);
            
            //if changed comment is empty
            if (!text) {
                $(this).parent().prev('.text-justify').text(currentCommentText);
                $(this).parent().prev('.text-justify').prop('contenteditable', false);
                $(this).text('Edit');

            }
            else if (currentCommentText !== text) {
                //$(this).parent().prev('.text-justify').removeAttr('contenteditable');
                $(this).parent().prev('.text-justify').prop('contenteditable', false);
                $(this).text('Edit');

                var content = {
                    ID: commentId, 
                    content: $(this).parent().prev('.text-justify').text()
                }
                
                $.ajax({
                    url: "/Comment/UpdateComment",
                    data: JSON.stringify(content),
                    type: "PATCH",
                    contentType: "application/json;charset=utf-8",
                    dataType: "html",
                    success: function (data) {
                        //TODO: add result.Message after email
                    },
                    error: function (errormessage) {
                        console.log(errormessage.responseText);
                    }
                });
            }
            //if changed comment is same
            else {
                $(this).parent().prev('.text-justify').prop('contenteditable', false);
                $(this).text('Edit');
            }
        }
    });
</script> 