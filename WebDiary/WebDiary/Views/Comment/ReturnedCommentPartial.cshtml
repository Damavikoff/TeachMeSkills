@using System.Security.Claims;
@model CommentViewModel

@*если список комментов пуст, то....*@

<div class="d-flex flex-row p-3">
    @* <img src="https://i.imgur.com/zQZSWrt.jpg" width="40" height="40" class="rounded-circle mr-3">*@
    <div class="w-100">
        <div class="d-flex justify-content-between align-items-center">
            <div class="d-flex flex-row align-items-center">
                <input type="hidden" class="commentId" value="@Model.Id">
                <input type="hidden" class="eventId" value="@Model.EventId">
                <small class="c-badge"><b>@User.FindFirstValue(ClaimTypes.Email)</b>
                    @if (Model.ParentCommentId != null)
                    {
                        <small class="c-badge"><i>reply to @Model.ParentCommentEmail</i></small>
                    }
                </small>
            </div>
            <small>@Model.CreatedAt.Value.ToString("HH:mm MM/dd/yyyy")</small>
        </div>
        <p class="text-justify comment-text mb-0">@Model.Content</p>
        <div class="d-flex flex-row user-feed">
            @if (Model.UserId == User.FindFirstValue(ClaimTypes.NameIdentifier))
            {
                <span class="commentEdit"><a href="#"><small class="c-badge"><i>Edit</i></small></a></span>
                <span class="commentDelete"><a href="#"><small class="c-badge"><i>Delete</i></small></a></span>
            }
            else
            {
                <span class="commentReply"><a href="#"><small class="c-badge"><i>Reply</i></small></a></span> @*<a href=""> is not work*@
            }
        </div>
    </div>
</div>

<script>
    
</script>
<script>
    var db;
    function databaseExists(name, callback) { //if db not exist
        var dbExists = true;
        var request = window.indexedDB.open(name);
        request.onupgradeneeded = function (e) {
            if (request.result.version === 1) {
                dbExists = false;
                db = e.target.result;

                var objectstore = db.createObjectStore("comments", {
                    autoIncrement: false,
                });
                objectstore.createIndex("comment", "comment", { unique: false });

                db.close();

                if (callback) callback(objectstore);
            }
        };
    }

    function addNewRecord(data, name) {
        var request = window.indexedDB.open(name);
        request.onsuccess = function (e) {
            db = e.target.result;

            const transaction = db.transaction(["comments"], "readwrite");
            const objectStore = transaction.objectStore("comments");
            objectStore.add(data.comment, data.ID);

            db.close();
        };
    }

    function getComment(key, name) {
        var request = window.indexedDB.open(name);

        return new Promise((resolve, reject) => {
            request.onsuccess = function (e) {
                db = e.target.result;

                const transaction = db.transaction(["comments"], "readwrite");

                transaction.oncomplete = (event) => {
                    console.log("Transaction completed");
                };
                transaction.onerror = (event) => {
                    console.log("Transaction not opened due to error: " + transaction.error);
                };

                const objectStore = transaction.objectStore("comments");
                const objectStoreRequest = objectStore.get(key);

                objectStoreRequest.onerror = (event) => {
                    console.log("Request not successful");
                };
                objectStoreRequest.onsuccess = (event) => {
                    console.log("Request successful")
                    resolve(objectStoreRequest.result);
                };

                db.close();
            }
        })
    }

    function clearDb(name) {
        var request = window.indexedDB.open(name);

        return new Promise((resolve, reject) => {
            request.onsuccess = function (e) {
                db = e.target.result;

                const transaction = db.transaction(["comments"], "readwrite");

                transaction.oncomplete = (event) => {
                    console.log("Transaction completed");
                };
                transaction.onerror = (event) => {
                    console.log("Transaction not opened due to error: " + transaction.error);
                };

                const objectStore = transaction.objectStore("comments");
                const objectStoreRequest = objectStore.clear();

                objectStoreRequest.onerror = (event) => {
                    console.log("Request not successful");
                };
                objectStoreRequest.onsuccess = (event) => {
                    console.log("Request successful");
                    resolve(objectStoreRequest.result);
                };

                db.close();
            }
        })
    }

    $('.commentEdit').click(async function (event) {
        event.preventDefault();

        var name = "CommentsDB";
        databaseExists(name, function (db) { 
        });

        var commentId = $(this)
            .closest('.w-100')
            .children('.align-items-center')
            .children('.align-items-center')
            .find('.commentId').val();

        const text = $(this).parent().prev('.text-justify').text().trim();

        //from EDIT to SAVE
        if ($(this).text() == 'Edit') {
            await clearDb(name);

            $(this).parent().prev('.text-justify').prop('contenteditable', true);
            $(this).parent().prev('.text-justify').focus();
            $(this).find('i').text("Save");

            $(".w-100").each((index, element) => {
                var data = {
                    ID: $(element).find(".align-items-center .commentId").val(),
                    comment: $(element).children("p").text()
                };
                addNewRecord(data, name);
            });
        }

        //from SAVE to EDIT
        else {
            const currentCommentText = await getComment(commentId, name);

            //if changed comment is empty
            if (!text) {
                $(this).parent().prev('.text-justify').text(currentCommentText);
                $(this).parent().prev('.text-justify').prop('contenteditable', false);
                $(this).find('i').text("Edit");
            }
            else if (currentCommentText !== text) {
                $(this).parent().prev('.text-justify').prop('contenteditable', false);
                $(this).find('i').text("Edit");

                var content = {
                    userId: '@User.FindFirstValue(ClaimTypes.NameIdentifier)',
                    ID: commentId,
                    content: $(this).parent().prev('.text-justify').text()
                }

                $.ajax({
                    url: "/Comment/UpdateComment",
                    data: JSON.stringify(content),
                    type: "PATCH",
                    contentType: "application/json;charset=utf-8",
                    dataType: "html",
                    success: function (data) {
                        console.log(data);
                    },
                    error: function (errormessage) {
                        alert(errormessage.responseText);
                        //TODO: comment.revert();
                    }
                });
            }

            //if changed comment is same
            else {
                $(this).parent().prev('.text-justify').prop('contenteditable', false);
                $(this).find('i').text("Edit");
            }
        }
    });

    $('.commentDelete').click(function (event) {
        event.preventDefault();

        var commentId = $(this)
            .closest('.w-100')
            .children('.align-items-center')
            .children('.align-items-center')
            .find('.commentId').val();

        var eventId = $(this)
            .closest('.w-100')
            .children('.align-items-center')
            .children('.align-items-center')
            .find('.eventId').val();

        var commentdto =
        {
            id: commentId,
            eventId: eventId
        };

        $.ajax({
            url: "/Comment/DeleteComment",
            data: JSON.stringify(commentdto),
            type: "POST",
            contentType: "application/json;charset=utf-8",
            dataType: "html",
            success: function (data) {
                $('#show-event-comments-partial').html(data);
            },
            error: function (errormessage) {
                alert(errormessage.responseText);
            }
        });
    });
</script> 